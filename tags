!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
FLOAT_EQ	matrix.c	/^#define FLOAT_EQ(/;"	d	file:
FLOAT_EQ	sketch.c	/^#define FLOAT_EQ(/;"	d	file:
FLOAT_EQ	svd.c	/^#define FLOAT_EQ(/;"	d	file:
FLOAT_EQ	svd_lapack.c	/^#define FLOAT_EQ(/;"	d	file:
GET	svd_lapack.c	/^#define GET(/;"	d	file:
IMAX	sketch.c	/^#define IMAX(/;"	d	file:
IMIN	svd_lapack.c	/^#define IMIN(/;"	d	file:
MAX	svd.c	/^#define MAX(/;"	d	file:
MIN	svd.c	/^#define MIN(/;"	d	file:
SET	svd_lapack.c	/^#define SET(/;"	d	file:
SIGN	svd.c	/^#define SIGN(/;"	d	file:
SQR	svd.c	/^#define SQR(/;"	d	file:
SQUARE	sketch.c	/^#define SQUARE(/;"	d	file:
add	matrix.c	/^Matrix add(Matrix* mat1, Matrix* mat2)$/;"	f
alpha	thread_sketch.c	/^	float alpha; $/;"	m	struct:merge_sketch_arg_struct	file:
alpha	thread_sketch.c	/^	float alpha; $/;"	m	struct:sketch_arg_struct	file:
batch_fd_sketch_l	sketch.c	/^Matrix batch_fd_sketch_l(Matrix* mat, int l, int batch_size)$/;"	f
col_to_row	svd_lapack.c	/^void col_to_row(double* m, int r, int c, Matrix* mR)$/;"	f
construct_sketch_l	sketch.c	/^int construct_sketch_l(char* fname, int l, float alpha, bool write, char* write_fname, bool check)$/;"	f
convert_mat	matrix.c	/^double** convert_mat(Matrix* mat)$/;"	f
diag	matrix.c	/^Matrix diag(double* diagonal, int rows)$/;"	f
equal	matrix.c	/^bool equal(Matrix* mat1, Matrix* mat2)$/;"	f
eye	matrix.c	/^Matrix eye(int rows)$/;"	f
fd_sketch_l	sketch.c	/^Matrix fd_sketch_l(Matrix* mat, int l)$/;"	f
free_mat	matrix.c	/^void free_mat(Matrix *mat)$/;"	f
get_ind	matrix.c	/^    inline double get_ind(Matrix* mat, int x, int y)$/;"	f
get_zero_rows	sketch.c	/^int get_zero_rows(Matrix* mat, int* zero_rows)$/;"	f
init_mat	matrix.c	/^Matrix init_mat(int rows, int cols)$/;"	f
l	thread_sketch.c	/^	int l;$/;"	m	struct:merge_sketch_arg_struct	file:
l	thread_sketch.c	/^	int l;$/;"	m	struct:sketch_arg_struct	file:
l2_norm	svd.c	/^double l2_norm(Matrix* mat)$/;"	f
main	run_sketch.c	/^int main(int argc, char* argv[])$/;"	f
main	test.c	/^int main(int argc, char* argv[])$/;"	f
main	thread_sketch.c	/^int main(int argc, char* argv[])$/;"	f
mat	thread_sketch.c	/^	Matrix* mat; $/;"	m	struct:merge_sketch_arg_struct	file:
mat	thread_sketch.c	/^	Matrix* mat; $/;"	m	struct:sketch_arg_struct	file:
merge_sketch_arg_struct	thread_sketch.c	/^struct merge_sketch_arg_struct$/;"	s	file:
mult	matrix.c	/^Matrix mult(Matrix* mat1, Matrix* mat2)$/;"	f
mult_diag	matrix.c	/^void mult_diag(Matrix* result, double* diag, int diag_len, Matrix* mat2)$/;"	f
mult_scalar	matrix.c	/^Matrix mult_scalar(Matrix* mat, double c)$/;"	f
old_test_add	test.c	/^void old_test_add(int r)$/;"	f
old_test_equal	test.c	/^void old_test_equal(int r, int c)$/;"	f
old_test_mult	test.c	/^void old_test_mult(int r)$/;"	f
old_test_mult_scalar	test.c	/^void old_test_mult_scalar(int r, int c)$/;"	f
old_test_transpose	test.c	/^void old_test_transpose(int r, int c)$/;"	f
pfd_sketch_l	sketch.c	/^Matrix pfd_sketch_l(Matrix* mat, int l, float alpha)$/;"	f
print_array	svd_lapack.c	/^void print_array(double* a, int r, int c)$/;"	f
print_mat	matrix.c	/^void print_mat(Matrix* mat)$/;"	f
print_s_mat	matrix.c	/^void print_s_mat(double** mat, int nrows, int ncols)$/;"	f
pythag	svd.c	/^double pythag(double a, double b)$/;"	f
rand_matrix	matrix.c	/^Matrix rand_matrix(int rows, int cols)$/;"	f
read_mat	matrix.c	/^Matrix read_mat(char* fname)$/;"	f
recon_error	sketch.c	/^double recon_error(Matrix* mat, Matrix* sketch)$/;"	f
reorder	svd.c	/^int reorder(Matrix* U, double* w, Matrix* V)$/;"	f
row_end	thread_sketch.c	/^	int row_end; $/;"	m	struct:sketch_arg_struct	file:
row_start	thread_sketch.c	/^	int row_start;$/;"	m	struct:sketch_arg_struct	file:
row_to_col	svd_lapack.c	/^void row_to_col(Matrix *m, double* mC)$/;"	f
run_sketch_l	svd_lapack.c	/^int run_sketch_l()$/;"	f
run_t_sketch	thread_sketch.c	/^int run_t_sketch(char* mat_fname, int l, int num_threads)$/;"	f
set_ind	matrix.c	/^    inline void set_ind(Matrix* mat, int x, int y, double val)$/;"	f
sketch	thread_sketch.c	/^	Matrix sketch; $/;"	m	struct:sketch_arg_struct	file:
sketch	thread_sketch.c	/^	Matrix* sketch;$/;"	m	struct:merge_sketch_arg_struct	file:
sketch_arg_struct	thread_sketch.c	/^struct sketch_arg_struct$/;"	s	file:
sq_frobenius_norm	matrix.c	/^double sq_frobenius_norm(Matrix* mat)$/;"	f
sub_fd_sketch_l	sketch.c	/^Matrix sub_fd_sketch_l(Matrix* mat, int start_row, int end_row, int l)$/;"	f
subtract	matrix.c	/^Matrix subtract(Matrix* mat1, Matrix* mat2)$/;"	f
svd	svd.c	/^int svd(Matrix* mat, double* w, Matrix* V, bool reduced)$/;"	f
svd_l	svd_lapack.c	/^int svd_l(Matrix* mat, Matrix* Umat, double* s, Matrix* VTmat, bool reduced)$/;"	f
t_merge_sketches	thread_sketch.c	/^void* t_merge_sketches(void* arguments)$/;"	f
t_sketch_mat	thread_sketch.c	/^void* t_sketch_mat(void* arguments)$/;"	f
test_add	test.c	/^void test_add()$/;"	f
test_frob_norm	test.c	/^void test_frob_norm(int r, int c)$/;"	f
test_frobenius_norm	test.c	/^void test_frobenius_norm()$/;"	f
test_ind	matrix.c	/^Matrix test_ind(int rows, int cols)$/;"	f
test_mult	test.c	/^void test_mult()$/;"	f
test_read_write	test.c	/^void test_read_write()$/;"	f
test_scalar_mult	test.c	/^void test_scalar_mult()$/;"	f
test_svd	svd.c	/^int test_svd(char* fname)$/;"	f
test_transpose	test.c	/^void test_transpose()$/;"	f
test_truncate_cols	test.c	/^void test_truncate_cols()$/;"	f
transpose	matrix.c	/^Matrix transpose(Matrix* mat)$/;"	f
truncate_cols	matrix.c	/^void truncate_cols(Matrix** mat, int ncols)$/;"	f
truncate_cols_2	matrix.c	/^Matrix truncate_cols_2(Matrix* mat, int ncols)$/;"	f
truncate_rows	matrix.c	/^Matrix truncate_rows(Matrix* mat, int nrows)$/;"	f
update_fd_sketch_l	sketch.c	/^void update_fd_sketch_l(Matrix* sketch, Matrix* mat, int l)$/;"	f
write_mat	matrix.c	/^void write_mat(Matrix* mat, char* fname)$/;"	f
zeros	matrix.c	/^Matrix zeros(int rows, int cols) $/;"	f
